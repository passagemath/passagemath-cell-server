# HG changeset patch
# User Jason Grout <jason.grout@drake.edu>
# Date 1311809242 25200
# Node ID f67d7039d959b56d5b611b5979375b95dbe69398
# Parent 70bf7bd97577936a031bc4845b6a27640af0c634
[mq]: show.patch

diff --git a/sage/misc/html.py b/sage/misc/html.py
--- a/sage/misc/html.py
+++ b/sage/misc/html.py
@@ -192,13 +192,17 @@
             s = s[j+7:] 
 
         from sage.misc.misc import EMBEDDED_MODE
-        import sys
         if EMBEDDED_MODE:
             if EMBEDDED_MODE['frontend']=='notebook':
                 print "<html><font color='black'>%s</font></html>"%t
+                return ''
             elif EMBEDDED_MODE['frontend']=='sagecell':
+                import sys
                 sys._sage_messages.message_queue.display({'text/html':"<font color='black'>%s</font>"%t})
-        return ''
+                return ''
+        else:
+            return ''
+
 
     def table(self, x, header = False):
         r"""
@@ -278,7 +282,14 @@
 
         """
         from table import table
-        print table(x, header_row=header)._html_()
+        from sage.misc.misc import EMBEDDED_MODE
+        output_string = table(x, header_row=header)._html_()
+        if EMBEDDED_MODE:
+            if EMBEDDED_MODE['frontend']=='notebook':
+                print "<html>"+output_string+"</html>"
+            elif EMBEDDED_MODE['frontend']=='sagecell':
+                import sys
+                sys._sage_messages.message_queue.display({'text/html':output_string})
 
     def iframe(self, url, height=400, width=800):
         r"""
diff --git a/sage/misc/latex.py b/sage/misc/latex.py
--- a/sage/misc/latex.py
+++ b/sage/misc/latex.py
@@ -2119,7 +2119,8 @@
     if pdflatex or (viewer == "pdf" and engine == "latex"):
         engine = "pdflatex"
     # notebook
-    if EMBEDDED_MODE and viewer is None:
+    import sage.misc.misc as misc
+    if misc.EMBEDDED_MODE and viewer is None:
         MathJax_okay = True
         for t in latex.mathjax_avoid_list():
             if s.find(t) != -1:
@@ -2127,14 +2128,28 @@
             if not MathJax_okay:
                 break
         if MathJax_okay:  # put comma at end of line below?
-            print MathJax().eval(objects, mode=mode, combine_all=combine_all)
+            mathjax_expr = str(MathJax().eval(objects, mode=mode, combine_all=combine_all))
+            if misc.EMBEDDED_MODE['frontend']=='sagecell':
+                mathexpr=mathjax_expr.replace('<html>','').replace('</html>','')
+                import sys
+                sys._sage_messages.message_queue.display({'text/html':mathexpr})
+            else:
+                print mathjax_expr
         else:
             base_dir = os.path.abspath("")
             png_file = graphics_filename(ext='png')
             png_link = "cell://" + png_file
             png(objects, os.path.join(base_dir, png_file),
                 debug=debug, engine=engine)
-            print '<html><img src="%s"></html>'%png_link  # put comma at end of line?
+            if misc.EMBEDDED_MODE['frontend']=='sagecell':
+                import sys
+                import json #TODO: be smart about which json
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([png_file]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg={'text/filename': png_file}
+                sys._sage_messages.message_queue.display(msg)
+            else:
+                print '<html><img src="%s"></html>'%png_link  # put comma at end of line?
         return
     # command line or notebook with viewer
     tmp = tmp_dir('sage_viewer')
diff --git a/sage/misc/table.py b/sage/misc/table.py
--- a/sage/misc/table.py
+++ b/sage/misc/table.py
@@ -683,7 +683,7 @@
         """
         import types
         from itertools import cycle
-        ret = ""
+        ret = [] # list of strings
         rows = self._rows
         header_row = self._options['header_row']
         if self._options['frame']:
@@ -694,28 +694,28 @@
         if len(rows) > 0:
             # If the table has < 100 rows, don't truncate the output in the notebook
             if len(rows) <= 100:
-                ret += "<html>\n<div class=\"notruncate\">\n<table %s class=\"table_form\">\n<tbody>" % frame
+                ret.append("<div class=\"notruncate\">\n<table %s class=\"table_form\">\n<tbody>" % frame)
             else:
-                ret += "<html>\n<div class=\"truncate\">\n<table %s class=\"table_form\">\n<tbody>" % frame
+                ret.append("<div class=\"truncate\">\n<table %s class=\"table_form\">\n<tbody>" % frame)
 
             # First row:
             if header_row:
-                ret += "<tr>"
-                ret += self._html_table_row(rows[0], header=header_row)
-                ret += "</tr>"
+                ret.append("<tr>")
+                ret.extend(self._html_table_row(rows[0], header=header_row))
+                ret.append("</tr>")
                 rows = rows[1:]
 
             # Other rows:
             for row_class, row in zip(cycle(["row-a", "row-b"]), rows):
-                ret += "<tr class =\"%s\">" % row_class
-                ret += self._html_table_row(row, header=False)
-                ret += "</tr>"
-            ret += "</tbody>\n</table>\n</div>\n</html>"
-        return ret
+                ret.append("<tr class =\"%s\">" % row_class)
+                ret.extend(self._html_table_row(row, header=False))
+                ret.append("</tr>")
+            ret.append("</tbody>\n</table>\n</div>")
+        return "".join(ret)
 
     def _html_table_row(self, row, header=False):
         r"""
-        Return a string of the items of a list as one row of an HTML table. Used by
+        Return a list of strings of the items of a list as one row of an HTML table. Used by
         the :meth:`_html_` method.
 
         INPUTS:
@@ -733,7 +733,7 @@
         EXAMPLES::
 
             sage: T = table([['a', 'bb', 'ccccc'], [10, -12, 0], [1, 2, 3]])
-            sage: print T._html_table_row(['a', 2, '$x$'])
+            sage: T._html_table_row(['a', 2, '$x$'])
             <td>a</td>
             <td><script type="math/tex">2</script></td>
             <td><script type="math/tex">x</script></td>
@@ -755,22 +755,22 @@
         else:
             first_column_tag = column_tag
 
-        ret = ""
+        ret = [] # list of strings
         # First entry of row:
         entry = row[0]
         if isinstance(entry, Graphics):
-            ret += first_column_tag % entry.show(linkmode = True)
+            ret.append(first_column_tag % entry.show(linkmode = True))
         elif isinstance(entry, str):
-            ret += first_column_tag % math_parse(entry)
+            ret.append(first_column_tag % math_parse(entry))
         else:
-            ret += first_column_tag % ('<script type="math/tex">%s</script>' % latex(entry))
+            ret.append(first_column_tag % ('<script type="math/tex">%s</script>' % latex(entry)))
 
         # Other entries:
         for column in xrange(1,len(row)):
             if isinstance(row[column], Graphics):
-                ret += column_tag % row[column].show(linkmode = True)
+                ret.append(column_tag % row[column].show(linkmode = True))
             elif isinstance(row[column], str):
-                ret += column_tag % math_parse(row[column])
+                ret.append(column_tag % math_parse(row[column]))
             else:
-                ret += column_tag % ('<script type="math/tex">%s</script>' % latex(row[column]))
+                ret.append(column_tag % ('<script type="math/tex">%s</script>' % latex(row[column])))
         return ret
diff --git a/sage/plot/animate.py b/sage/plot/animate.py
--- a/sage/plot/animate.py
+++ b/sage/plot/animate.py
@@ -19,7 +19,7 @@
 import os
 
 from sage.structure.sage_object import SageObject
-from sage.misc.temporary_file import tmp_filename, tmp_dir
+from sage.misc.temporary_file import tmp_filename, tmp_dir, graphics_filename
 import plot
 import sage.misc.misc as misc
 import sage.misc.viewer
@@ -378,7 +378,7 @@
                 raise OSError, msg
         else:
             if not savefile:
-                savefile = sage.misc.temporary_file.graphics_filename(ext='gif')
+                savefile = graphics_filename(ext='gif')
             if not savefile.endswith('.gif'):
                 savefile += '.gif'
             savefile = os.path.abspath(savefile)
@@ -389,6 +389,15 @@
             from subprocess import check_call, CalledProcessError
             try:
                 check_call(cmd, shell=True)
+                import sage.misc.misc as misc
+                if misc.EMBEDDED_MODE and misc.EMBEDDED_MODE['frontend']=='sagecell':
+                    import json #TODO: be smart about which json
+                    import sys
+                    sys._sage_upload_file_pipe.send_bytes(json.dumps([savefile]))
+                    sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                    msg={'text/filename': os.path.basename(savefile)}
+                    sys._sage_messages.message_queue.display(msg)
+
                 if show_path:
                     print "Animation saved to file %s." % savefile
             except (CalledProcessError, OSError):
@@ -554,7 +563,7 @@
             if not savefile:
                 if output_format is None:
                     output_format = 'mpg'
-                savefile = sage.misc.temporary_file.graphics_filename(ext=output_format)
+                savefile = graphics_filename(ext=output_format)
             else:
                 if output_format is None:
                     suffix = os.path.splitext(savefile)[1]
diff --git a/sage/plot/graphics.py b/sage/plot/graphics.py
--- a/sage/plot/graphics.py
+++ b/sage/plot/graphics.py
@@ -1784,17 +1784,27 @@
 
         # This option should not be passed on to save().
         linkmode = kwds.pop('linkmode', False)
-
         if sage.doctest.DOCTEST_MODE:
             kwds.pop('filename', None)
             self.save(DOCTEST_MODE_FILE, **kwds)
-        elif sage.plot.plot.EMBEDDED_MODE:
+        elif sage.misc.misc.EMBEDDED_MODE:
             kwds.setdefault('filename', graphics_filename())
+            filename=kwds['filename']
             self.save(**kwds)
-            if linkmode == True:
-                return "<img src='cell://%s'>" % kwds['filename']
+            import sys
+            if sage.misc.misc.EMBEDDED_MODE['frontend']=='sagecell':
+                import json
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([filename]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+
+            if linkmode:
+                return "<img src='cell://%s'>"%filename
             else:
-                html("<img src='cell://%s'>" % kwds['filename'])
+                if sage.misc.misc.EMBEDDED_MODE['frontend']=='sagecell':
+                    msg={'text/filename': filename}
+                    sys._sage_messages.message_queue.display(msg)
+                else:
+                    html("<img src='cell://%s'>"%filename)
         else:
             kwds.setdefault('filename', tmp_filename(ext='.png'))
             self.save(**kwds)
@@ -2717,45 +2727,50 @@
         options.update(kwds)
         dpi = options.pop('dpi')
         transparent = options.pop('transparent')
+        format = options.pop('format', None)
         fig_tight = options.pop('fig_tight')
         
         if filename is None:
             filename = options.pop('filename')
         if filename is None:
             filename = graphics_filename()
-        ext = os.path.splitext(filename)[1].lower()
-        
-        if ext not in ALLOWED_EXTENSIONS:
-            raise ValueError("allowed file extensions for images are '"
-                             + "', '".join(ALLOWED_EXTENSIONS) + "'!")
-        elif ext in ['', '.sobj']:
-            SageObject.save(self, filename)
+
+        if isinstance(filename, basestring):
+            ext = os.path.splitext(filename)[1].lower()
+            if format is None:
+                # guess the format from the extension, so make sure that the extension
+                # is allowed
+                if ext not in ALLOWED_EXTENSIONS:
+                    raise ValueError("allowed file extensions for images are '"
+                                     + "', '".join(ALLOWED_EXTENSIONS) + "'!")
+                elif ext in ['', '.sobj']:
+                    SageObject.save(self, filename)
+
+        from matplotlib import rcParams
+        rc_backup = (rcParams['ps.useafm'], rcParams['pdf.use14corefonts'],
+                     rcParams['text.usetex']) # save the rcParams
+        figure = self.matplotlib(**options)
+        # You can output in PNG, PS, EPS, PDF, or SVG format, depending on the file extension. 
+        # matplotlib looks at the file extension to see what the renderer should be.
+        # The default is FigureCanvasAgg for PNG's because this is by far the most
+        # common type of files rendered, like in the notebook, for example.
+        # if the file extension is not '.png', then matplotlib will handle it.
+        from matplotlib.backends.backend_agg import FigureCanvasAgg
+        figure.set_canvas(FigureCanvasAgg(figure))
+        # this messes up the aspect ratio!
+        #figure.canvas.mpl_connect('draw_event', pad_for_tick_labels)
+
+        # tight_layout adjusts the *subplot* parameters so ticks aren't cut off, etc.
+        figure.tight_layout()
+
+        if fig_tight is True:
+            figure.savefig(filename, dpi=dpi, bbox_inches='tight',
+                bbox_extra_artists=self._bbox_extra_artists,
+                transparent=transparent, format=format)
+
         else:
-            from matplotlib import rcParams
-            rc_backup = (rcParams['ps.useafm'], rcParams['pdf.use14corefonts'],
-                         rcParams['text.usetex']) # save the rcParams
-            figure = self.matplotlib(**options)
-            # You can output in PNG, PS, EPS, PDF, or SVG format, depending
-            # on the file extension.
-            # matplotlib looks at the file extension to see what the renderer should be.
-            # The default is FigureCanvasAgg for PNG's because this is by far the most
-            # common type of files rendered, like in the notebook, for example.
-            # if the file extension is not '.png', then matplotlib will handle it.
-            from matplotlib.backends.backend_agg import FigureCanvasAgg
-            figure.set_canvas(FigureCanvasAgg(figure))
-            # this messes up the aspect ratio!
-            #figure.canvas.mpl_connect('draw_event', pad_for_tick_labels)
-
-            # tight_layout adjusts the *subplot* parameters so ticks aren't cut off, etc.
-            figure.tight_layout()
-
-            if fig_tight is True:
-                figure.savefig(filename, dpi=dpi, bbox_inches='tight',
-                    bbox_extra_artists=self._bbox_extra_artists,
-                    transparent=transparent)
-            else:
-                figure.savefig(filename, dpi=dpi,
-                           transparent=transparent)
+            figure.savefig(filename, dpi=dpi,
+                       transparent=transparent, format=format)
 
             # Restore the rcParams to the original, possibly user-set values
             (rcParams['ps.useafm'], rcParams['pdf.use14corefonts'],
@@ -3046,11 +3061,18 @@
             self.save(DOCTEST_MODE_FILE,
                       dpi=dpi, figsize=self._figsize, axes = axes, **args)
             return
-        if sage.plot.plot.EMBEDDED_MODE:
+        if filename is None:
+            filename = graphics_filename()
+        if sage.misc.misc.EMBEDDED_MODE:
             self.save(filename, dpi=dpi, figsize=self._figsize, axes = axes, **args)
+            if sage.misc.misc.EMBEDDED_MODE['frontend']=='sagecell':
+                import json #TODO: be smart about which json
+                import sys
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([filename]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg={'text/filename': filename}
+                sys._sage_messages.message_queue.display(msg)
             return
-        if filename is None:
-            filename = tmp_filename(ext='.png')
         self._render(filename, dpi=dpi, figsize=self._figsize, axes = axes, **args)
         os.system('%s %s 2>/dev/null 1>/dev/null &'%(
                          sage.misc.viewer.png_viewer(), filename))
diff --git a/sage/plot/plot.py b/sage/plot/plot.py
--- a/sage/plot/plot.py
+++ b/sage/plot/plot.py
@@ -359,10 +359,6 @@
 
 import sage.misc.misc
 from sage.misc.misc import srange
-
-# Code elsewhere relies on a module-level EMBEDDED_MODE variable
-from sage.misc.misc import EMBEDDED_MODE
-
 from sage.misc.randstate import current_randstate #for plot adaptive refinement
 from math import sin, cos, pi #for polar_plot
 
diff --git a/sage/plot/plot3d/base.pyx b/sage/plot/plot3d/base.pyx
--- a/sage/plot/plot3d/base.pyx
+++ b/sage/plot/plot3d/base.pyx
@@ -1078,6 +1078,7 @@
 
         from sage.misc.misc import EMBEDDED_MODE
         from sage.doctest import DOCTEST_MODE
+        import sys
         ext = None
 
         # Tachyon resolution options
@@ -1091,9 +1092,18 @@
             opts = '-res %s %s'%(figsize[0]*100, figsize[1]*100)
 
         if DOCTEST_MODE or viewer=='tachyon' or (viewer=='java3d' and EMBEDDED_MODE):
+            ext = "png"
+            filename_full=filename+'.'+ext
             T = self._prepare_for_tachyon(frame, axes, frame_aspect_ratio, aspect_ratio, zoom)
-            tachyon_rt(T.tachyon(), filename+".png", verbosity, True, opts)
-            ext = "png"
+            tachyon_rt(T.tachyon(), filename_full, verbosity, True, opts)
+            if EMBEDDED_MODE and EMBEDDED_MODE['frontend']=='sagecell':
+                msg={}
+                import json #TODO: be smart about which json
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([filename_full]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg['text/filename']=filename_full
+                sys._sage_messages.message_queue.display(msg)
+
             import sage.misc.viewer
             viewer_app = sage.misc.viewer.png_viewer()
 
@@ -1129,19 +1139,29 @@
             T.export_jmol(archive_name, force_reload=EMBEDDED_MODE, zoom=zoom*100, **kwds)
             viewer_app = os.path.join(sage.misc.misc.SAGE_LOCAL, "bin/jmol")
 
-            # We need a script to load the file
-            f = open(filename + '.'+ext, 'w')
-            import sagenb
-            if EMBEDDED_MODE:
-                path = "cells/%s/%s" %(sagenb.notebook.interact.SAGE_CELL_ID, archive_name)
+            if EMBEDDED_MODE and EMBEDDED_MODE['frontend']=='sagecell':
+                msg={}
+                import json #TODO: be smart about which json
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([archive_name]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg['application/x-jmol']=archive_name
+                sys._sage_messages.message_queue.display(msg)
+
             else:
-                path = archive_name
-            f.write('set defaultdirectory "%s"\n' %path) 
-            f.write('script SCRIPT\n')
-            f.close()
+                # We need a script to load the file
+                if EMBEDDED_MODE and EMBEDDED_MODE['frontend']=='notebook':
+                    import sagenb
+                    path = "cells/%s/%s" %(sagenb.notebook.interact.SAGE_CELL_ID, archive_name)
+                else:
+                    path = archive_name
+                f = open(filename + '.'+ext, 'w')
+                f.write('set defaultdirectory "%s"\n' %path) 
+                f.write('script SCRIPT\n')
+                f.close()
 
             # If the server has a Java installation we can make better static images with Jmol
             # Test for Java then make image with Jmol or Tachyon if no JavaVM
+            # TODO: Support sage cell server
             if EMBEDDED_MODE:
                 #name image file
                 head,tail = os.path.split(archive_name)
diff --git a/sage/plot/plot3d/tachyon.py b/sage/plot/plot3d/tachyon.py
--- a/sage/plot/plot3d/tachyon.py
+++ b/sage/plot/plot3d/tachyon.py
@@ -319,6 +319,13 @@
         if sage.misc.misc.EMBEDDED_MODE:
             filename = graphics_filename()
             self.save(filename, verbose=verbose, extra_opts=extra_opts)
+            if sage.misc.misc.EMBEDDED_MODE['frontend']=='sagecell':
+                import json #TODO: be smart about which json
+                import sys
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([filename]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg={'text/filename': filename}
+                sys._sage_messages.message_queue.display(msg)
             return
         filename = tmp_filename(ext='.png')
         self.save(filename, verbose=verbose, extra_opts=extra_opts)
