# HG changeset patch
# User Jason Grout <jason.grout@drake.edu>
# Date 1311809242 25200
# Node ID b625872ed12b5ce804bb3e9b3d8318b52283629c
# Parent  ded2e3503123bc406860bdebec41a1800d75b596
[mq]: show.patch

diff -r ded2e3503123 -r b625872ed12b sage/misc/html.py
--- a/sage/misc/html.py	Fri Jul 01 12:43:53 2011 -0500
+++ b/sage/misc/html.py	Wed Jul 27 16:27:22 2011 -0700
@@ -170,13 +170,17 @@
             s = s[j+7:] 
 
         from sage.misc.misc import EMBEDDED_MODE
-        import sys
         if EMBEDDED_MODE:
             if EMBEDDED_MODE['frontend']=='notebook':
                 print "<html><font color='black'>%s</font></html>"%t
+                return ''
             elif EMBEDDED_MODE['frontend']=='sagecell':
+                import sys
                 sys._sage_messages.message_queue.display({'text/html':"<font color='black'>%s</font>"%t})
-        return ''
+                return ''
+        else:
+            return ''
+
 
     def table(self, x, header = False):
         r""" 
@@ -320,6 +324,7 @@
             sage: html._table_columns([Primes])
             <td><span class="math">\hbox{<class 'sage.sets.primes.Primes'>}</span></td>
         """
+        rowstring=[]
         if header == False:
             column_tag = "<td>%s</td>"
         else:
@@ -334,12 +339,13 @@
 
         for column in xrange(len(row)):
             if isinstance(row[column], Graphics):
-                print column_tag % row[column].show(linkmode = True)
+                rowstring.append(column_tag % row[column].show(linkmode = True))
             elif isinstance(row[column], str):
-                print column_tag % math_parse(row[column])
+                rowstring.append(column_tag % math_parse(row[column]))
             else:
-                print column_tag % ('<span class="math">' 
+                rowstring.append(column_tag % ('<span class="math">' 
                                     + latex(row[column]).replace('\\texttt','\\hbox') 
-                                    + '</span>')
+                                    + '</span>'))
+        return "".join(rowstring)
 
 html = HTML()
diff -r ded2e3503123 -r b625872ed12b sage/misc/latex.py
--- a/sage/misc/latex.py	Fri Jul 01 12:43:53 2011 -0500
+++ b/sage/misc/latex.py	Wed Jul 27 16:27:22 2011 -0700
@@ -37,6 +37,7 @@
 from misc import tmp_dir, graphics_filename
 import sage_eval
 from sage.misc.misc import SAGE_DOC, EMBEDDED_MODE
+import sage.misc.misc as misc
 from sage.misc.sage_ostools import have_program
 from sage.misc.cachefunc import cached_method
 
@@ -1830,6 +1831,7 @@
         'pdf'
 
     """
+    from sage.misc.misc import EMBEDDED_MODE
     if isinstance(objects, LatexExpr):
         s = str(objects)
     else:
@@ -1848,7 +1850,13 @@
             if not jsMath_okay:
                 break
         if jsMath_okay:
-            print JSMath().eval(objects, mode=mode)  # put comma at end of line?
+            jsmath_expr = str(JSMath().eval(objects, mode=mode))
+            if EMBEDDED_MODE['frontend']=='sagecell':
+                mathexpr=jsmath_expr.replace('<html>','').replace('</html>','')
+                import sys
+                sys._sage_messages.message_queue.display({'text/html':mathexpr})
+            else:
+                print jsmath_expr  # put comma at end of line?
         else:
             if pdflatex is True:
                 engine = "pdflatex"
@@ -1859,7 +1867,15 @@
             png_link = "cell://" + png_file
             png(objects, os.path.join(base_dir, png_file),
                 debug=debug, engine=engine)
-            print '<html><img src="%s"></html>'%png_link  # put comma at end of line?
+            if EMBEDDED_MODE['frontend']=='sagecell':
+                import sys
+                import json #TODO: be smart about which json
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([png_file]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg={'text/filename': png_file}
+                sys._sage_messages.message_queue.display(msg)
+            else:
+                print '<html><img src="%s"></html>'%png_link  # put comma at end of line?
         return
     # command line or notebook with viewer
     if pdflatex:
diff -r ded2e3503123 -r b625872ed12b sage/plot/plot.py
--- a/sage/plot/plot.py	Fri Jul 01 12:43:53 2011 -0500
+++ b/sage/plot/plot.py	Wed Jul 27 16:27:22 2011 -0700
@@ -318,10 +318,10 @@
 ALLOWED_EXTENSIONS = ['.eps', '.pdf', '.png', '.ps', '.sobj', '.svg']
 DEFAULT_FIGSIZE=(6, 3.70820393249937)
 DEFAULT_DPI = 100
-from sage.misc.misc import EMBEDDED_MODE
-DOCTEST_MODE = False
+import sage.misc.misc as misc
 import sage.misc.misc
 from sage.misc.misc import srange
+DOCTEST_MODE = False
 DOCTEST_MODE_FILE = os.path.join(sage.misc.misc.SAGE_TMP, 'test.png')
 SHOW_DEFAULT = True
 
@@ -1717,17 +1717,29 @@
 
         # This option should not be passed on to save().
         linkmode = kwds.pop('linkmode', False)
+        import sys
 
         if DOCTEST_MODE:
             kwds.pop('filename', None)
             self.save(DOCTEST_MODE_FILE, **kwds)
-        elif EMBEDDED_MODE:
+        elif misc.EMBEDDED_MODE:
             kwds.setdefault('filename', sage.misc.misc.graphics_filename()) 
+            filename=kwds['filename']
             self.save(**kwds)
-            if linkmode == True:
-                return "<img src='cell://%s'>" % kwds['filename']
+
+            if misc.EMBEDDED_MODE['frontend']=='sagecell':
+                import json #TODO: be smart about which json
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([filename]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+
+            if linkmode:
+                return "<img src='cell://%s'>"%filename
             else:
-                html("<img src='cell://%s'>" % kwds['filename'])
+                if misc.EMBEDDED_MODE['frontend']=='sagecell':
+                    msg={'text/filename': filename}
+                    sys._sage_messages.message_queue.display(msg)
+                else:
+                    html("<img src='cell://%s'>"%filename)
         else:
             kwds.setdefault('filename', sage.misc.misc.tmp_filename() + '.png')
             self.save(**kwds)
@@ -2437,29 +2449,34 @@
         options.update(kwds)
         dpi = options.pop('dpi')
         transparent = options.pop('transparent')
+        format = options.pop('format', None)
         
         if filename is None:
             filename = options.pop('filename')
         if filename is None:
             filename = sage.misc.misc.graphics_filename()
-        ext = os.path.splitext(filename)[1].lower()
-        
-        if ext not in ALLOWED_EXTENSIONS:
-            raise ValueError("allowed file extensions for images are '"
-                             + "', '".join(ALLOWED_EXTENSIONS) + "'!")
-        elif ext in ['', '.sobj']:
-            SageObject.save(self, filename)
-        else:
-            figure = self.matplotlib(**options)
-            # You can output in PNG, PS, EPS, PDF, or SVG format, depending on the file extension. 
-            # matplotlib looks at the file extension to see what the renderer should be.
-            # The default is FigureCanvasAgg for PNG's because this is by far the most
-            # common type of files rendered, like in the notebook, for example.
-            # if the file extension is not '.png', then matplotlib will handle it.
-            from matplotlib.backends.backend_agg import FigureCanvasAgg
-            figure.set_canvas(FigureCanvasAgg(figure))
-            figure.savefig(filename, dpi=dpi, bbox_inches='tight',
-                           transparent=transparent)
+        if isinstance(filename, str):
+            ext = os.path.splitext(filename)[1].lower()
+            
+            if format is None:
+                # guess the format from the extension
+                if ext not in ALLOWED_EXTENSIONS:
+                    raise ValueError("allowed file extensions for images are '"
+                                     + "', '".join(ALLOWED_EXTENSIONS) + "'!")
+                elif ext in ('', '.sobj'):
+                    SageObject.save(self, filename)
+                    return
+
+        figure = self.matplotlib(**options)
+        # You can output in PNG, PS, EPS, PDF, or SVG format, depending on the file extension. 
+        # matplotlib looks at the file extension to see what the renderer should be.
+        # The default is FigureCanvasAgg for PNG's because this is by far the most
+        # common type of files rendered, like in the notebook, for example.
+        # if the file extension is not '.png', then matplotlib will handle it.
+        from matplotlib.backends.backend_agg import FigureCanvasAgg
+        figure.set_canvas(FigureCanvasAgg(figure))
+        figure.savefig(filename, dpi=dpi, bbox_inches='tight',
+                       transparent=transparent, format=format)
 
 
 _SelectiveFormatterClass = None
@@ -3705,11 +3722,20 @@
             self.save(DOCTEST_MODE_FILE,
                       dpi=dpi, figsize=self._figsize, axes = axes, **args)
             return
-        if EMBEDDED_MODE:
+
+        if filename is None:
+            filename = sage.misc.misc.graphics_filename()
+
+        if misc.EMBEDDED_MODE: # JASON TODO
             self.save(filename, dpi=dpi, figsize=self._figsize, axes = axes, **args)
+            if misc.EMBEDDED_MODE['frontend']=='sagecell':
+                import json #TODO: be smart about which json
+                import sys
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([filename]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg={'text/filename': filename}
+                sys._sage_messages.message_queue.display(msg)
             return
-        if filename is None:
-            filename = sage.misc.misc.tmp_filename() + '.png'
         self._render(filename, dpi=dpi, figsize=self._figsize, axes = axes, **args)
         os.system('%s %s 2>/dev/null 1>/dev/null &'%(
                          sage.misc.viewer.browser(), filename))
diff -r ded2e3503123 -r b625872ed12b sage/plot/plot3d/base.pyx
--- a/sage/plot/plot3d/base.pyx	Fri Jul 01 12:43:53 2011 -0500
+++ b/sage/plot/plot3d/base.pyx	Wed Jul 27 16:27:22 2011 -0700
@@ -1069,6 +1069,7 @@
 
         from sage.plot.plot import DOCTEST_MODE
         from sage.misc.misc import EMBEDDED_MODE
+        import sys
         ext = None
 
         # Tachyon resolution options
@@ -1082,9 +1083,18 @@
             opts = '-res %s %s'%(figsize[0]*100, figsize[1]*100)
 
         if DOCTEST_MODE or viewer=='tachyon' or (viewer=='java3d' and EMBEDDED_MODE):
+            ext = "png"
+            filename_full=filename+'.'+ext
             T = self._prepare_for_tachyon(frame, axes, frame_aspect_ratio, aspect_ratio, zoom)
-            tachyon_rt(T.tachyon(), filename+".png", verbosity, True, opts)
-            ext = "png"
+            tachyon_rt(T.tachyon(), filename_full, verbosity, True, opts)
+            if EMBEDDED_MODE and EMBEDDED_MODE['frontend']=='sagecell':
+                msg={}
+                import json #TODO: be smart about which json
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([filename_full]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg['text/filename']=filename_full
+                sys._sage_messages.message_queue.display(msg)
+
             import sage.misc.viewer
             viewer_app = sage.misc.viewer.browser()
 
@@ -1117,11 +1127,19 @@
             T.export_jmol(archive_name, force_reload=EMBEDDED_MODE, zoom=zoom*100, **kwds)
             viewer_app = os.path.join(sage.misc.misc.SAGE_LOCAL, "bin/jmol")
 
-            # We need a script to load the file
-            f = open(filename + '.jmol', 'w')
-            f.write('set defaultdirectory "%s"\n' % archive_name)
-            f.write('script SCRIPT\n')
-            f.close()
+            if EMBEDDED_MODE and EMBEDDED_MODE['frontend']=='sagecell':
+                msg={}
+                import json #TODO: be smart about which json
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([archive_name]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg['application/x-jmol']=archive_name
+                sys._sage_messages.message_queue.display(msg)
+            else:
+                # We need a script to load the file
+                f = open(filename + '.jmol', 'w')
+                f.write('set defaultdirectory "%s"\n' % archive_name)
+                f.write('script SCRIPT\n')
+                f.close()
 
         if viewer == 'canvas3d':
             T = self._prepare_for_tachyon(frame, axes, frame_aspect_ratio, aspect_ratio, zoom)
diff -r ded2e3503123 -r b625872ed12b sage/plot/plot3d/tachyon.py
--- a/sage/plot/plot3d/tachyon.py	Fri Jul 01 12:43:53 2011 -0500
+++ b/sage/plot/plot3d/tachyon.py	Wed Jul 27 16:27:22 2011 -0700
@@ -319,6 +319,13 @@
         if sage.misc.misc.EMBEDDED_MODE:
             filename = sage.misc.misc.graphics_filename()
             self.save(filename, verbose=verbose, extra_opts=extra_opts)
+            if sage.misc.misc.EMBEDDED_MODE['frontend']=='sagecell':
+                import json #TODO: be smart about which json
+                import sys
+                sys._sage_upload_file_pipe.send_bytes(json.dumps([filename]))
+                sys._sage_upload_file_pipe.recv_bytes() # confirmation upload happened
+                msg={'text/filename': filename}
+                sys._sage_messages.message_queue.display(msg)
             return
         filename = sage.misc.misc.tmp_filename() + '.png'
         self.save(filename, verbose=verbose, extra_opts=extra_opts)
